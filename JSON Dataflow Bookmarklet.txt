javascript:(function(){var nodeComments = {};var dataflowName;loopForDataFlow(100);async function loopForDataFlow(loopTimeInMilliSeconds) {    var looping = true;    var nodeOpen;    var nodeName;    var commentNodeCreated;    var nodeNameElementCollection;    var nodeNameElement;    var commentNodeHTML;    var commentNodeElement;    var buttonSave;    var previewJSON;    var buttonReplaced;    var closeJSON;    var preExistingJSON;    var previewJSONOpen;    /*Update the nodeComments variable with pre-existing comments*/    previewJSON = document.getElementsByClassName("action jsonPreview")[0];    previewJSON.click();    closeJSON = document.getElementsByClassName("modal-close")[0];    preExistingJSON = JSON.parse(document.getElementsByClassName("dataflow-json")[0].innerHTML);    for (var key in preExistingJSON) {        if (preExistingJSON[key].comments) {            nodeComments[key] = preExistingJSON[key].comments;        }    }    closeJSON.click();    /*Set minimum loop time to be 250ms*/    var loopTime = loopTimeInMilliSeconds;    if (loopTimeInMilliSeconds < 250) {        loopTime = 250;    }    while (looping) {        /*Check if the node has been opened by checking if there is an element with ClassName == modal-title*/        if (document.getElementsByClassName("modal-title").length == 1 && document.getElementsByClassName("dataflow-json-modal").length == 0) {            nodeOpen = true;        }        else {            nodeOpen = false;            commentNodeCreated = false;        }        if (document.getElementsByClassName("dataflow-json-modal").length == 1) {            previewJSONOpen = true;        }        else {            previewJSONOpen = false;            buttonReplaced = false;        }        /*Sequence of events to run if the node is open*/        if (nodeOpen) {            if (!commentNodeCreated) {                nodeNameElementCollection = document.getElementsByClassName("textInput inputContainer required");                for (i=0;i<nodeNameElementCollection.length;i++) {                    if (nodeNameElementCollection[i].getAttribute("data-form-input-name") == "node_name") {                        nodeNameElement = nodeNameElementCollection[i];                        nodeName = nodeNameElement.lastElementChild.value;                        commentNodeHTML =                             '<div class="textInput inputContainer" data-form-input-name="comments">' +                                 '<div class="label">Comments</div>' +                                 '<textarea id="comments" type="text" class="style-guide input textArea"></textarea>' +                            '</div>'                        ;                        commentNodeElement = document.createElement('div');                        commentNodeElement.innerHTML = commentNodeHTML.trim();                                                addCommentNode(commentNodeElement, nodeNameElement);                        if (nodeComments[nodeName]) {                            document.getElementById("comments").value = nodeComments[nodeName];                        }                        commentNodeCreated = true;                    }                }                buttonSave = document.getElementsByClassName("style-guide primary ok-btn")[0];                buttonSave.addEventListener('click',                     function() {                        updateNodeComments();                    }                , false);            }        }        /*Remove the Download JSON eventListeners and add new one, update nodes to include comments*/        if (previewJSONOpen) {            if (!buttonReplaced) {                buttonReplaced = true;                replaceDownloadButton();            }         }        var result = await time_wait(loopTime);    }}function addCommentNode(newNode, referenceNode) {    /*Taken from:    https://stackoverflow.com/questions/4793604/how-to-insert-an-element-after-another-element-in-javascript-without-using-a-lib*/    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);}function updateNodeComments() {    var nodeNameElementCollection;    var nodeNameElement;    var nodeName;    var comments;    nodeNameElementCollection = document.getElementsByClassName("textInput inputContainer required");    for (i=0;i<nodeNameElementCollection.length;i++) {        if (nodeNameElementCollection[i].getAttribute("data-form-input-name") == "node_name") {            nodeNameElement = nodeNameElementCollection[i];            nodeName = nodeNameElement.lastElementChild.value;            comments = document.getElementById("comments").value;            nodeComments[nodeName] = comments;            console.log(nodeComments);        }    }}/*Taken from:https://stackoverflow.com/questions/3665115/how-to-create-a-file-in-memory-for-user-to-download-but-not-through-server*/function downloadDataFlowJSON(text) {    var dataflowJSON = JSON.parse(document.getElementsByClassName("dataflow-json")[0].innerHTML);    var element = document.createElement('a');    dataflowName = document.getElementsByClassName("workflow-name")[0].innerHTML + ".json";    dataflowJSON = JSON.stringify(dataflowJSON, null, 2);    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));    element.setAttribute('download', dataflowName);     element.style.display = 'none';    document.body.appendChild(element);    element.click();    document.body.removeChild(element);}function replaceDownloadButton() {    var downloadJSONButtonCollection = document.getElementsByClassName("style-guide secondary");    var downloadJSONButton;    for (i=0;i<downloadJSONButtonCollection.length;i++) {        if (downloadJSONButtonCollection[i].getAttribute("data-tooltip") == "Download JSON") {            downloadJSONButton = downloadJSONButtonCollection[i];        }    }    $(downloadJSONButton).replaceWith($(downloadJSONButton).clone());        for (i=0;i<downloadJSONButtonCollection.length;i++) {        if (downloadJSONButtonCollection[i].getAttribute("data-tooltip") == "Download JSON") {            downloadJSONButton = downloadJSONButtonCollection[i];        }    }    var preExistingJSON = JSON.parse(document.getElementsByClassName("dataflow-json")[0].innerHTML);    for (var key in preExistingJSON) {        if (nodeComments.hasOwnProperty(key)) {            preExistingJSON[key].comments = nodeComments[key];        }        else {            preExistingJSON[key].comments = "";        }    }        preExistingJSON = JSON.stringify(preExistingJSON, null, 2);        document.getElementsByClassName("dataflow-json")[0].innerHTML = preExistingJSON;    downloadJSONButton.onclick = function() {downloadDataFlowJSON(getJSONText())};}function getJSONText() {    var dataflowJSON = JSON.parse(document.getElementsByClassName("dataflow-json")[0].innerHTML);    dataflowJSON = JSON.stringify(dataflowJSON, null, 2);    return dataflowJSON;}function time_wait(time_ms) {    return new Promise(resolve => {      setTimeout(() => {        resolve('resolved');      }, time_ms);    });}})();